import dataMapper from "../data-mapper.js";
import path from "node:path";
import fs from "fs";
import upload from "../middlewares/multer.js";

const adminController = {
  async deleteCoffee(req, res) {
    try {
      const reference = req.body.reference;
      
      
      const result = await dataMapper.deleteCoffeeToDatabase(reference);

      if (result === 0) {
        console.log("‚ö†Ô∏è Aucune r√©f√©rence trouv√©e en base de donn√©es.");
        return res.render("admin", {
          noReferenceFindMessage: `Aucune r√©f√©rence ${reference} trouv√©e dans la base de donn√©es`,
          page: "admin",
        });
      }

      // D√©termination du chemin du fichier en fonction de l'environnement
      const imageDirectory =
        process.env.NODE_ENV === "production"
          ? path.join("/mnt/data/coffeesUp") // Volume Railway
          : path.join(process.cwd(), "public", "assets", "coffeesUp"); // Dev

      const filePath = path.join(imageDirectory, `${reference}.png`);

      // V√©rification et suppression du fichier
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`‚úÖ Fichier supprim√©: ${filePath}`);
      } else {
        console.log(`‚ùå Aucun fichier trouv√© pour ${reference}.png`);
      }

      req.session.popUpMessage = {
        notificationTitle: "Caf√© supprim√© avec succ√®s",
        details: `Le caf√© avec la r√©f√©rence (${reference}) a √©t√© supprim√©`,
        type: "succ√®s",
      };

      res.redirect("/admin");
    } catch (error) {
      console.error("üî• Erreur dans deleteCoffee:", error);
      res.status(500).send("Erreur interne lors de la suppression du caf√©.");
    }
  },

  async addCoffee(req, res) {
    try {
      let newCoffeeData = req.body;

      // V√©rifier que le prix est un nombre au format d√©cimal avec 2 chiffres apr√®s la virgule
      const price = parseFloat(newCoffeeData.price_per_kg);

      // V√©rification si price_per_kg est un nombre valide et au format d√©cimal
      if (
        isNaN(price) ||
        !/^(\d+(\.\d{1,2})?)?$/.test(newCoffeeData.price_per_kg)
      ) {
        return res
          .status(400)
          .send(
            "Le prix par kg doit √™tre un nombre d√©cimal avec 2 chiffres apr√®s la virgule."
          );
      }

      // Si le prix est valide, on formate √† 2 d√©cimales
      newCoffeeData.price_per_kg = price.toFixed(2);

      // Si l'utilisateur est admin, on peut ajouter le caf√© √† la base de donn√©es
      await dataMapper.addCoffeeToDatabase(newCoffeeData);

      req.session.popUpMessage = {
        notificationTitle: "Caf√© ajout√© avec succ√®s",
        details: `Le caf√© ${newCoffeeData.name} a √©t√© ajout√©`,
        type: "succ√®s",
      };

      // Redirection vers la page d'administration apr√®s l'ajout
      res.redirect("/admin");
    } catch (error) {
      console.error(error);
      res.status(500).send("Erreur interne lors de l'ajout du caf√©.");
    }
  },

  async renderAdminPage(req, res) {
    try {
      // R√©cup√©ration et suppression du message apr√®s affichage
      const popUpMessage = req.session.popUpMessage;
      delete req.session.popUpMessage;

      res.render("admin", { page: "admin", popUpMessage });
    } catch (error) {
      console.error(error);
      res.status(500).send("Erreur interne lors du rendu de la page admin");
    }
  },
  async renderResultSearchPage(req, res) {
    try {
      const searchterm = req.query.searchterm;
      const coffees = await dataMapper.getCoffeesByNameOrRef(searchterm);

      res.render("searchResult", { page: "admin", coffees, searchterm });
    } catch (error) {
      console.error(error);
      res.status(500).send("Erreur interne lors du rendu de la page admin");
    }
  },
  async renderEditCoffeePage(req, res) {
    try {
      const id = req.params.id;
      const coffee = await dataMapper.getOneCoffeeById(id);
      const categoryName = await dataMapper.getCategoryNameById(id);

      // R√©cup√©ration et suppression du message apr√®s affichage
      const popUpMessage = req.session.popUpMessage;
      delete req.session.popUpMessage;

      res.render("editCoffee", {
        page: "admin",
        coffee,
        categoryName,
        popUpMessage,
      });
    } catch (error) {
      console.error(error);
      res.status(500).send("Erreur interne lors du rendu de la page admin");
    }
  },
  async editCoffee(req, res) {
    try {
      const coffeeId = req.params.id;
      let editCoffeeData = req.body;

      // V√©rifier que le prix est un nombre au format d√©cimal avec 2 chiffres apr√®s la virgule
      const price = parseFloat(editCoffeeData.price_per_kg);

      // V√©rification si price_per_kg est un nombre valide et au format d√©cimal
      if (
        isNaN(price) ||
        !/^(\d+(\.\d{1,2})?)?$/.test(editCoffeeData.price_per_kg)
      ) {
        req.session.popUpMessage = {
          notificationTitle: "√âchec de la modification",
          details:
            "Le prix par kg doit √™tre un nombre d√©cimal avec 2 chiffres apr√®s la virgule.",
          type: "error", 
        };
        return res.redirect(`/admin/edit-coffee/${coffeeId}`);
      }
      // Si le prix est valide, on formate √† 2 d√©cimales
      editCoffeeData.price_per_kg = price.toFixed(2);

      req.session.popUpMessage = {
        notificationTitle: "Caf√© √©dit√© avec succ√®s",
        details: `Le caf√© ${editCoffeeData.name} a √©t√© modifi√©`,
        type: "succ√®s",
      };

      // Si l'utilisateur est admin, on peut editer le caf√© √† la base de donn√©es
      await dataMapper.editCoffeeToDatabase(editCoffeeData, coffeeId);

      res.redirect(`/admin/edit-coffee/${coffeeId}`);
    } catch (error) {
      console.error(error);
      res.status(500).send("Erreur interne lors du rendu de la page admin");
    }
  },
};

export { adminController, upload };
